# ======================================================================================
# Ported from Gitlab's maven project sample .gitlab-ci.yml
# Refer to: https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Maven.gitlab-ci.yml
# NOTE: STM is using maven official docker image as CI Runner Executor
# See: https://hub.docker.com/_/maven/
# Default Image: 3.5.2-jdk-8-alpine
# ======================================================================================
#
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only. 
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
  - .m2/repository

stages:
- build
- test
- package
- deploy

.maven-project: &maven-project-setup
  # Since we require Maven for this job,
  # we can restrict the job to runners with a certain tag.
  # Of course, it is our duty to actually configure a runner
  # with the tag 'maven' and a working maven installation
  tags:
  #- maven
   - magicrp
  image: maven:3.5.2-jdk-8-alpine
  #image: maven:3-jdk-8

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  # A job is always executed within a stage.
  # If no stage is set, it defaults to 'test'.
  stage: build
  # Here you can execute arbitrate terminal commands.
  # If any of the commands returns a non zero exit code the job fails.
  script:
  - echo "Building project with maven"
  - 'mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true test-compile'

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
  - echo "Testing project with maven"
  - 'mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true verify'

.maven-package: &maven-package
  stage: package
  script:
  - echo "Packaging project into jar"
  - 'mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true package' 
  artifacts:
    paths:
    - target/*.jar

# This is the name of the job.
# You can choose it freely.
maven-build:
  <<: *maven-project-setup
  <<: *validate
  

maven-test:
  <<: *maven-project-setup
  <<: *verify

maven-package:
  <<: *maven-project-setup
  <<: *maven-package
  
docker-build:
  image: docker:latest
  services:
  - docker:dind
  stage: deploy
  #only:
  #- tags
  tags:
  #- maven
  - magicrp
  script:
  - echo "Building"
  - docker build -t helloworldxu1 .
  - docker tag helloworldxu1 registry.paas.workslan/helloworldxu/helloworldxu1
  - docker login -u xu_xi -p magicrp65640326 registry.paas.workslan
  - docker push registry.paas.workslan/helloworldxu/helloworldxu1
  - yosolo login --username xu_xi --password magicrp65640326
  - yosolo app create helloworldxu1
  - yosolo deploy update -a=helloworldxu1 -e=sh-stm -p 8080 --image=registry.paas.workslan/helloworldxu/helloworldxu1 --requests-memory 1Gi
  
#docker-build:
#  image: docker:latest
#  variables:
#    DOCKER_DRIVER: overlay
#    DOCKER_HOST: tcp://localhost:2375
#  services:
#  - docker:dind
#  tags:
#  - maven
#  stage: deploy
#  script:
#  - echo "Building docker image"
#  - docker build -t registry.paas.workslan/jobhere/jobhere-api .
#  - docker images



#docker-build:
#  image: docker:latest
#  variables:
#    DOCKER_DRIVER: overlay
#    DOCKER_HOST: tcp://localhost:2375
#  services:
#  - docker:dind
#  tags:
#  - maven
#  stage: deploy
#  script:
#  - echo "Building docker image"
  #- docker build -t registry.paas.workslan/jobhere/jobhere-api .
  #- docker images
  
#  - docker build -t helloworldxu1 .
#  - docker tag helloworldxu1 registry.paas.workslan/helloworldxu/helloworldxu1
  #- docker tag zhangyitong 10.29.139.47:5000/develop/zhangyitong:latest
#  - docker login -u xu_xi -p magicrp65640326 registry.paas.workslan
  #- docker login -u ${REGISTRY_NAME} -p ${REGISTRY_PSD} ${REGISTRY_IP}:5000
#  - docker push registry.paas.workslan/helloworldxu/helloworldxu1
    

 
#stage: imagePush
 
#tags:
 
#- image-push
 
#only:
 
#- develop
 
#dockerRun-zhangyitong:
 
#script:
 
#利用ansible远程部署，其中zhangyitong-dev 映射到要部署机器的ip，“”双引号中内容为远程机器上执行的命令
 
#- ansible zhangyitong-dev -m command -a "docker login -u ${REGISTRY_NAME} -p ${REGISTRY_PSD} ${REGISTRY_IP}:5000" #应用服务器登录注册中心
 
#- ansible zhangyitong-dev -m command -a "docker pull ${REGISTRY_IP}:5000/develop/zhangyitong:latest" #应用服务拉取镜像
 
#- ansible zhangyitong-dev -m copy -a "src=/srv/gitlabci_project/zhangyitong/build-deploy/env_config/zhangyitong_develop dest=/tmp/zhangyitong" #分发docker-compose文件到应用服务器
 
#- ansible zhangyitong-dev -m copy -a "src=/srv/gitlabci_project/zhangyitong/employee-component/target/employee-component.jar dest=/tmp/zhangyitong"
 
#- ansible marketing-dev -m copy -a "src=/srv/gitlabci_project/marketing/build-deploy/rm.sh dest=/tmp/marketing_develop"
 
#- ansible marketing-dev -m command -a "cd /tmp/marketing_develop && chmod u+x rm.sh && ./rm.sh"
 
#- ansible zhangyitong-dev -m command -a "docker-compose -f /tmp/zhangyitong/zhangyitong_develop/docker-compose.yml up -d" #应用服务器运行docker-compose
 
#stage: imageProcess
 
#tags:
 
#- image-push
 
#only:
 
#- develop